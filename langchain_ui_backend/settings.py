"""
Django settings for langchain_ui_backend project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ

env = environ.Env(
    # set casting, default value
    DJANGO_ADMIN_USERNAME=(str, 'admin'),
    DJANGO_ADMIN_PASSWORD=(str, 'admin'),
)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4(3p407g_1=5!6l4j)(1i8vas9lpgrz!(btz@ntkz6$a#+-8%c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'djangocodemirror',
    'api',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'langchain_ui_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'langchain_ui_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ADMIN
# get email and password from environment variables
DJANGO_ADMIN_USERNAME = env('DJANGO_ADMIN_USERNAME')
DJANGO_ADMIN_PASSWORD = env('DJANGO_ADMIN_PASSWORD')

# Cors allow all
CORS_ALLOW_ALL_ORIGINS = True

# CSRF
CSRF_COOKIE_SAMESITE = 'None'


# Template string for HTML Code to instanciate CodeMirror for a field.
CODEMIRROR_FIELD_INIT_JS = (u"""<script>var {varname} = """
                            """CodeMirror.fromTextArea("""
                            """document.getElementById("{inputid}"),"""
                            """{settings});</script>""")

# Available CodeMirror configurations.
CODEMIRROR_SETTINGS = {
    'empty': {},

    'javascript': {
        'modes': ['javascript'],
        'matchBrackets': True,
        'continueComments': "Enter",
        'extraKeys': {"Ctrl-Q": "toggleComment"},
        'addons': [
            "CodeMirror/addon/edit/matchbrackets.js",
            "CodeMirror/addon/comment/continuecomment.js",
            "CodeMirror/addon/comment/comment.js",
        ],
    },

    'restructuredtext': {
        'mode': 'rst',
        'modes': ['python', 'stex', 'rst'],
        'addons': [
            "CodeMirror/addon/mode/overlay.js",
        ],
    },

    'html': {
        'mode': 'htmlmixed',
        'modes': ['xml', 'javascript', 'css', 'vbscript', 'htmlmixed'],
    },

    'django': {
        'mode': 'django',
        'modes': ['xml', 'javascript', 'css', 'vbscript', 'htmlmixed',
                  'django'],
        'addons': [
            "CodeMirror/addon/mode/overlay.js",
        ],
    },

    'css': {
        'modes': ['css'],
        'matchBrackets': True,
        'extraKeys': {"Ctrl-Space": "autocomplete"},
        'addons': [
            "CodeMirror/addon/edit/matchbrackets.js",
            "CodeMirror/addon/hint/show-hint.js",
            "CodeMirror/addon/hint/css-hint.js",
        ],
        'extra_css': [
            "CodeMirror/addon/hint/show-hint.css",
        ],
    },

    'scss': {
        'mode': 'text/x-scss',
        'modes': ['css'],
        'matchBrackets': True,
        'addons': [
            "CodeMirror/addon/edit/matchbrackets.js",
        ],
    },

    'python': {
        'mode': {
            'name': "python",
            'version': 3,
            'singleLineStringErrors': False,
        },
        'modes': ['python'],
        'matchBrackets': True,
        'addons': [
            "CodeMirror/addon/edit/matchbrackets.js",
        ],
    },
}

# List of CodeMirror Javascript base files that will be loaded before every
# other CodeMirror Javascript components.
CODEMIRROR_BASE_JS = ["CodeMirror/lib/codemirror.js"]

# List of CodeMirror CSS base files that will be loaded before themes.
CODEMIRROR_BASE_CSS = ["CodeMirror/lib/codemirror.css"]

# Available CodeMirror CSS Theme files.
CODEMIRROR_THEMES = {
    "ambiance": "CodeMirror/theme/ambiance.css",
}

# Available CodeMirror Javascript mode files.
CODEMIRROR_MODES = {
    "css": "CodeMirror/mode/css/css.js",
    "django": "CodeMirror/mode/django/django.js",
    "htmlmixed": "CodeMirror/mode/htmlmixed/htmlmixed.js",
    "javascript": "CodeMirror/mode/javascript/javascript.js",
    "python": "CodeMirror/mode/python/python.js",
    "rst": "CodeMirror/mode/rst/rst.js",
    "stex": "CodeMirror/mode/stex/stex.js",
    "vbscript": "CodeMirror/mode/vbscript/vbscript.js",
    "xml": "CodeMirror/mode/xml/xml.js",
}

# HTML element to load a Javascript asset
CODEMIRROR_JS_ASSET_TAG = (u'<script type="text/javascript" '
                           'src="{url}"></script>')

# HTML element to load a CSS asset
CODEMIRROR_CSS_ASSET_TAG = u'<link rel="stylesheet" href="{url}">'

# Template string for Javascript bundle names
CODEMIRROR_BUNDLE_CSS_NAME = "dcm-{settings_name}_css"

# Template string for CSS bundle names
CODEMIRROR_BUNDLE_JS_NAME = "dcm-{settings_name}_js"

# Option arguments used to build CSS bundles with ``django-assets``.
CODEMIRROR_BUNDLE_CSS_OPTIONS = {
    'filters': 'yui_css',
    'output': 'css/dcm-{settings_name}.min.css',
}

# Option arguments used to build Javascript bundles with ``django-assets``.
CODEMIRROR_BUNDLE_JS_OPTIONS = {
    'filters': 'yui_js',
    'output': 'js/dcm-{settings_name}.min.js',
}
